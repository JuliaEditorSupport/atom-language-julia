comment: """
    Reference to the Oniguruma Regex libraray:
      https://github.com/kkos/oniguruma/blob/master/doc/RE

    TODO:
    * Once 0.4 is released, simplify type matches (no explicit 'Union', parens, etc.)
    * take out ::Type
    * Add more regex stuff.
    * Some in comments throughout the grammar

"""
fileTypes: [
  "jl"
]
firstLineMatch: "^#!.*\\bjulia\\s*$"
foldingStartMarker: "^\\s*(?:if|while|for|begin|function|macro|module|baremodule|type|immutable|struct|try|let)\\b(?!.*\\bend\\b).*$"
foldingStopMarker: "^\\s*(?:end)\\b.*$"
name: "Julia"
patterns: [
  {
    include: "#operator"
  }
  {
    include: "#array"
  }
  {
    include: "#string"
  }
  {
    include: "#bracket"
  }
  {
    include: "#function_decl"
  }
  {
    include: "#function_call"
  }
  {
    include: "#keyword"
  }
  {
    include: "#number"
  }
  {
    include: "#comment"
  }
  {
    include: "#type_decl"
  }
  {
    include: "#symbol"
  }
]
repository:
  array:
    patterns: [
      {
        begin: "\\["
        beginCaptures:
          "0":
              name: "meta.bracket.julia"
        end: "(?:\\])(?:(\\.)?'*)"
        endCaptures:
          "0":
              name: "meta.bracket.julia"
          "1":
              name: "keyword.operator.transpose.julia"
        name: "meta.array.julia"
        patterns: [
          {
            match: "\\bend\\b"
            name: "constant.numeric.julia"
          }
          {
            match: "\\bfor\\b"
            name: "keyword.control.julia"
          }
          {
            include: "$self"
          }
        ]
      }
    ]
  bracket:
    patterns: [
      {
        match: "(?:\\(|\\)|\\[|\\]|\\{|\\}|,)(?!('|(?:\\.'))*\\.?')"
        name: "meta.bracket.julia"
      }
    ]
  comment:
    patterns: [
      {
        begin: "#="
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.begin.julia"
        end: "=#"
        endCaptures:
          "0":
            name: "punctuation.definition.comment.end.julia"
        name: "comment.block.number-sign-equals.julia"
      }
      {
        begin: "#"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.julia"
        end: "\\n"
        # match: "(?<!\\$)(#)(?!\\{).*$\\n?"
        name: "comment.line.number-sign.julia"
      }
    ]
  function_call:
    patterns: [
      {
        begin: "([[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\.?(?=\\()"
        beginCaptures:
          "1":
            name: "support.function.julia"
          "2":
            name: "support.type.julia"
        end: "\\)(('|(\\.'))*\\.?')?"
        endCaptures:
          "0":
            name: "meta.bracket.julia"
          "1":
            name: "keyword.operator.transposed-func.julia"
        patterns: [
          {
            match: '\\bfor\\b'
            name: 'keyword.control.julia'
          }
          {
            include: "$self"
          }
        ]
      }
    ]
  function_decl:
    patterns: [
      {
        captures:
          "1":
            name: "entity.name.function.julia"
          "2":
            name: "support.type.julia"
        match: "([[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?(?=\\(.*\\)(::[^\\s]+)?(\\s*\\bwhere\\b\\s*[^\\s]+)?\\s*?=(?![=>]))"
        comment: """
        first group is function name
        Second group is type parameters (e.g. {T<:Number, S})
        Then open parens
        Then a lookahead ensures that we are followed by:
          - anything (function argumnets)
          - 0 or more spaces
          - Finally an equal sign
        Negative lookahead ensures we don't have another equal sign (not `==`)
        """
        comment: "This is different from the one in tpoisot's package"
      }
      {
        captures:
          "1":
            name: "keyword.other.julia"
          "2":
            name: "keyword.operator.dots.julia"
          "3":
            name: "entity.name.function.julia"
          "4":
            name: "support.type.julia"
        match: "\\b(function|macro)(?:\\s+(?:[[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*(\\.))?([[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?|\\s*)(?=\\()"
        comment: "similar regex to previous, but with keyword not 1-line syntax"
      }
    ]
  keyword:
    patterns: [
      {
        match: "\\b(?<![:_\\.])(?:function|@generated|type|immutable|mutable|struct|macro|quote|abstract|bitstype|typealias|module|baremodule|new|where)\\b"
        name: "keyword.other.julia"
      }
      {
        comment: "special case for blocks to support tokenizing outer properly"
        begin: "\\b(for)\\b"
        beginCaptures:
          "0":
            name: "keyword.control.julia"
        end: "(?<!,|\\s)(\\s*\\n)"
        patterns: [
          {
            match: "\\bouter\\b"
            name: "keyword.other.julia"
          }
          {
            include: '$self'
          }
        ]
      }
      {
        match: "\\b(?<![:_])(?:if|else|elseif|while|begin|let|do|try|catch|finally|return|break|continue)\\b"
        name: "keyword.control.julia"
      }
      {
        match: "\\b(?<![:_])end\\b"
        name: "keyword.control.end.julia"
      }
      {
        match: "\\b(?<![:_])(?:global|local|const)\\b"
        name: "storage.modifier.variable.julia"
      }
      {
        match: "\\b(?<![:_])(?:export)\\b"
        name: "keyword.control.export.julia"
      }
      {
        match: "\\b(?<![:_])(?:import)\\b"
        name: "keyword.control.import.julia"
      }
      {
        match: "\\b(?<![:_])(?:importall)\\b"
        name: "keyword.control.importall.julia"
      }
      {
        match: "\\b(?<![:_])(?:using)\\b"
        name: "keyword.control.using.julia"
      }
      {
        match: "(@(\\.|[[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*))"
        name: "support.function.macro.julia"
      }
      {
        match: "\\b(Argument|Assertion|Bounds|Divide|Domain|EOF|Inexact|Key|Load|Memory|Method|OutOfMemory|Overflow|Parse|StackOverflow|System|Type|UV|UndefRef|UndefVar)Error\\b"
        name: "support.type.exception.julia"
      }
    ]
  number:
    patterns: [
      {
        match: "((\\b0(x|X)[0-9a-fA-F](_?[0-9a-fA-F])*)|(\\b0o[0-7](_?[0-7])*)|(\\b0b[0-1](_?[0-1])*)|((\\b[0-9](_?[0-9])*\\.?(_?[0-9]*))|(\\.[0-9](_?[0-9])*))([eE][+-]?[0-9](_?[0-9])*)?(im\\b)?|\\bInf(32)?\\b|\\bNaN(32)?\\b)"
        name: "constant.numeric.julia"
      }
      {
        match: "\\btrue\\b|\\bfalse\\b|\\bnothing\\b"
        name: "constant.language.julia"
      }
    ]
  operator:
    patterns: [
      {
        match: "(?:->|<-|-->|=>)"
        name: "keyword.operator.arrow.julia"
      }
      {
        match: "(?::=|\\+=|-=|\\*=|//=|/=|\\.//=|\\./=|\\.\\*=|\\\\=|\\.\\\\=|\\^=|\\.\\^=|%=|\\.%=|รท=|\\.รท=|\\|=|&=|\\$=|<<=|>>=|>>>=|=(?!=))"
        name: "keyword.operator.update.julia"
      }
      {
        match: "(?:<<|>>>|>>|\\.>>>|\\.>>|\\.<<)"
        name: "keyword.operator.shift.julia"
      }
      {
        match: "(?:\\s*(::|>:|<:)\\s*((?:(?:Union)?\\([^)]*\\)|[[:alpha:]_][[:word:]\u207A-\u209C!\u2032\\.]*(?:{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?)))(?:\\.\\.\\.)?"
        captures:
          "1":
            name: "keyword.operator.relation.julia"
          "2":
            name: "support.type.julia"
      }
      {
        match: "(?:===|(?<=\\s)in(?=\\s)|\\.==|!==|!=|\\.>=|\\.>|\\.<=|\\.<|==|\\.!=|\\.=|\\.!|<:|>:|:>|(?<!>)>=|(?<!<)<=|>|<)"
        name: "keyword.operator.relation.julia"
      }
      {
        match: "(?:\\?:)"
        name: "keyword.operator.ternary.julia"
      }
      {
        match: "(?:\\|\\||&&|(?<![[:word:]])!)"
        name: "keyword.operator.boolean.julia"
      }
      {
        match: "(?<=[[:word:]\u207A-\u209C!\u2032\u2207\\)\\]\\}])(?::)"
        name: "keyword.operator.range.julia"
      }
      {
        match: "(?:\\|>)"
        name: "keyword.operator.applies.julia"
      }
      {
        match: "(?:\\||\\&|~)"
        name: "keyword.operator.bitwise.julia"
      }
      {
        match: "(?:\\+\\+|--|\\+|\\.\\+|-|\\.\\-|\\*|\\.\\*|//(?!=)|\\.//(?!=)|/|\\./|%|\\.%|\\\\|\\.\\\\|\\^|\\.\\^)"
        name: "keyword.operator.arithmetic.julia"
      }
      {
        match: "(?:::|(?<=\\s)isa(?=\\s))"
        name: "keyword.operator.isa.julia"
      }
      {
        match: "(?:\\.(?=(?:@|_|\\p{L}))|\\.\\.+)"
        name: "keyword.operator.dots.julia"
      }
      {
        match: "(?:\\$(?=.+))"
        name: "keyword.operator.interpolation.julia"
      }
      {
        captures:
          "2":
            name: "keyword.operator.transposed-variable.julia"
        match: "([[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)(('|(\\.'))*\\.?')"
      }
      {
        captures:
          "1":
            name: "bracket.end.julia"
          "2":
            name: "keyword.operator.transposed-matrix.julia"
        match: "(\\])((?:'|(?:\\.'))*\\.?')"
      }
      {
        captures:
          "1":
            name: "bracket.end.julia"
          "2":
            name: "keyword.operator.transposed-parens.julia"
        match: "(\\))((?:'|(?:\\.'))*\\.?')"
      }
    ]
  string:
    patterns: [
      {
        begin: '(?:(@doc)\\s((?:doc)?""")|(doc"""))'
        beginCaptures:
          '1':
            'name': 'support.function.macro.julia'
          '2':
            'name': 'punctuation.definition.string.begin.julia'
        end: '(""") ?(->)?'
        endCaptures:
          '1':
            'name': 'punctuation.definition.string.end.julia'
          '2':
            'name': 'keyword.operator.arrow.julia'
        name: 'string.docstring.julia'
        patterns: [
          {
            include: '#string_escaped_char'
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        begin: "(i?cxx)(\"\"\")"
        beginCaptures:
          "1":
            name: "support.function.macro.julia"
          "2":
            name: "punctuation.definition.string.begin.julia"
        end: "\"\"\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        name: 'embed.cxx.julia'
        contentName: 'source.cpp'
        patterns: [
          {
            include: 'source.cpp'
          }
          {
            include: '#string_dollar_sign_interpolate'
          }
        ]
      }
      {
        begin: "((i?cxxt?)|([rpv]cpp))(\")"
        beginCaptures:
          "1":
            name: "support.function.macro.julia"
          "4":
            name: "punctuation.definition.string.begin.julia"
        end: "\""
        name: 'embed.cxx.julia'
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        contentName: 'source.cpp'
        patterns: [
          {
            include: 'source.cpp'
          }
          {
            include: '#string_dollar_sign_interpolate'
          }
        ]
      }
      {
        begin: '^\\s?([[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)?(""")\\s?$'
        beginCaptures:
          '1':
            'name': 'support.function.macro.julia'
          '2':
            'name': 'punctuation.definition.string.begin.julia'
        end: '(""")'
        endCaptures:
          '1':
            'name': 'punctuation.definition.string.end.julia'
        name: 'string.docstring.julia'
        comment: """
        This only matches docstrings that start and end with triple quotes on
        their own line in the void
        """
        patterns: [
          {
            include: '#string_escaped_char'
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        begin: "'"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: "'"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        name: "string.quoted.single.julia"
        patterns: [
          {
            include: "#string_escaped_char"
          }
        ]
      }
      {
        begin: '"""'
        beginCaptures:
          "0":
            name: "punctuation.definition.string.multiline.begin.julia"
        end: '"""'
        endCaptures:
          "0":
            name: "punctuation.definition.string.multiline.end.julia"
        name: "string.quoted.triple.double.julia"
        comment: "multi-line string with triple double quotes"
        comment: "TODO: decide on a name for this scope"
        patterns: [
          {
            include: "#string_escaped_char"
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        name: "string.quoted.double.julia"
        begin: '"'
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: '"'
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        comment: "String with single pair of double quotes. Regex matches isolated double quote"
        patterns: [
          {
            include: "#string_escaped_char"
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
      {
        begin: "r\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.regexp.begin.julia"
        end: "(\")([imsx]{0,4})?"
        endCaptures:
          "1":
            name: "punctuation.definition.string.regexp.end.julia"
          "2":
            comment: "I took this scope name from python regex grammar"
            name: "keyword.other.option-toggle.regexp.julia"
        name: 'string.regexp.julia'
        patterns: [
          {
            include: '#string_escaped_char'
          }
        ]
      }
      {
        begin: "\\b[[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: "\"([[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)?"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        name: "string.quoted.other.julia"
        patterns: [
          {
            include: "#string_escaped_char"
          }
        ]
      }
      {
        begin: "`"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.julia"
        end: "`"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.julia"
        name: "string.interpolated.backtick.julia"
        patterns: [
          {
            include: "#string_escaped_char"
          }
          {
            include: "#string_dollar_sign_interpolate"
          }
        ]
      }
    ]
  string_escaped_char:
    patterns: [
      {
        match: "\\\\(\\\\|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|.)"
        name: "constant.character.escape.julia"
      }
    ]
  string_dollar_sign_interpolate:
    patterns: [
      {
        match: "\\$[[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*"
        name: "variable.interpolation.julia"
      }
      {
        begin: "\\$\\("
        end: "\\)"
        name: "variable.interpolation.julia"
        comment: """
        `punctuation.section.embedded`, `constant.escape`,
        & `meta.embedded.line` were considered but appear to have even spottier
        support among popular syntaxes.
        """
        patterns: [
          {
            include: '#nest_parens_and_self'
          }
          {
            include: "$self"
          }
        ]

      }
    ]
  nest_parens_and_self:
    patterns: [
      {
        begin: '\\('
        end: '\\)'
        patterns: [
          {
            include: '#nest_parens_and_self'
          }
        ]
      }
      {
        include: '$self'
      }
    ]
  symbol:
    patterns: [
      {
        match: "(?<![[:word:]\u207A-\u209C!\u2032\u2207\\)\\]\\}]):(?:[[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)"
        name: "constant.other.symbol.julia"
        comment: "This is string.quoted.symbol.julia in tpoisot's package"
      }
    ]
  type_decl:
    patterns: [
      {
        captures:
          "1":
            name: "entity.name.type.julia"
          "2":
            name: "entity.other.inherited-class.julia"
          "3":
            name: "punctuation.separator.inheritance.julia"
        match: "(?>!:_)(?:type|immutable|struct)\\s+([[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*)(\\s*(<:)\\s*[[:alpha:]_\u2207][[:word:]\u207A-\u209C!\u2032\u2207]*(?:{.*})?)?"
        name: "meta.type.julia"
      }
    ]
scopeName: "source.julia"
