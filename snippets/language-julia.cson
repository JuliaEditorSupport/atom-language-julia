".source.julia":
  "Docstring":
    prefix: "doc"
    body: '''
      @doc doc"""
      $1($2)
      $3
      """ ->
    '''
  "Documented function":
    prefix: "fxd"
    body: '''
      @doc doc"""
      $1($2)
      $3
      """ ->
      function $1($2)
      	$4
      end
    '''
  "Ternary operator":
    prefix: "3"
    body: "${1:condition} ? ${2:if_true} : ${3:if_false}"
  'Else if':
    prefix: 'elseif'
    body: """elseif ${1:condition}
      $2
    """
  'Else if2':
    prefix: 'elif'
    body: """elseif ${1:condition}
      $2
    """
  "error":
    prefix: "err"
    body: "error(\"$1\")"
  "finally":
    prefix: "fn"
    body: '''
      finally
      	$1
    '''
  "for/in":
    prefix: "fr"
    body: '''
      for ${1:variable} in ${2:iterator}
      	$3
      end
    '''
  "function":
    prefix: "fx"
    body: '''
      function ${1:name}(${2:args})
      	${3:body}
      end
    '''
  "return":
      prefix: 'ret'
      body: 'return $1'
  "if":
    prefix: "if"
    body: '''
      if ${1:condition}
      	${2:body}
      end
    '''
  "if/else":
    prefix: "ie"
    body: '''
      if ${1:condition}
      	${2:true_body}
      else
      	${3:false_body}
      end
    '''
  "macro":
    prefix: "mcr"
    body: '''
      macro ${1:name}(${2:args})
      	${3:body}
      end
    '''
  "println":
    prefix: "p"
    body: "println(${1:msg})"
  "throw":
    prefix: "th"
    body: "throw(${1:err_type}Error(${2:msg}))"
  "try/catch":
    prefix: "tr"
    body: '''
      try
      	${1:try_block}
      catch $1
      	$2
      end
    '''
  "type":
    prefix: "t"
    body: '''
      type ${1:name}
      	${1:fields}
      end
    '''
  "while":
    prefix: "wh"
    body: '''
      while ${1:condition}
      	${2:body}
      end
    '''
  'Compound expression':
    prefix: 'beg'
    body: """${1:variable} = begin
      $2
    end"""
  'let block':
    prefix: 'let'
    body: """${1:variable} = let
      $2
    end"""
